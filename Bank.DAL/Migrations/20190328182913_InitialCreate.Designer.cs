// <auto-generated />
using System;
using Bank.DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.DAL.Migrations
{
    [DbContext(typeof(BankDbContext))]
    [Migration("20190328182913_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.8-servicing-32085");

            modelBuilder.Entity("Bank.DAL.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Bank.DAL.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CVV2");

                    b.Property<double>("CashbackPercent");

                    b.Property<int?>("ClientId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("ExpDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Money");

                    b.Property<string>("Name");

                    b.Property<string>("Number");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Bank.DAL.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("FirstName");

                    b.Property<string>("INN");

                    b.Property<bool>("IsBlocked");

                    b.Property<bool>("IsCompany");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("Bank.DAL.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Header");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("Bank.DAL.Models.Deposit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CardId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime>("CreationDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Money");

                    b.Property<decimal>("PercentPerMonth");

                    b.Property<DateTime?>("UpdateAt");

                    b.Property<bool>("WasTaken");

                    b.HasKey("Id");

                    b.HasIndex("CardId");

                    b.ToTable("Deposits");
                });

            modelBuilder.Entity("Bank.DAL.Models.Loan", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CreationDate");

                    b.Property<string>("ExpDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Money");

                    b.Property<double>("Percent");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Loans");
                });

            modelBuilder.Entity("Bank.DAL.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Subject");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("Bank.DAL.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ClientId");

                    b.Property<string>("Comment");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("IsDeleted");

                    b.Property<double>("Money");

                    b.Property<DateTime?>("UpdateAt");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Bank.DAL.Models.Card", b =>
                {
                    b.HasOne("Bank.DAL.Models.Client", "Client")
                        .WithMany("Cards")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bank.DAL.Models.Comment", b =>
                {
                    b.HasOne("Bank.DAL.Models.Client", "Client")
                        .WithMany("Comments")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bank.DAL.Models.Deposit", b =>
                {
                    b.HasOne("Bank.DAL.Models.Card", "Card")
                        .WithMany("Deposits")
                        .HasForeignKey("CardId");
                });

            modelBuilder.Entity("Bank.DAL.Models.Loan", b =>
                {
                    b.HasOne("Bank.DAL.Models.Client", "Client")
                        .WithMany("Loans")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bank.DAL.Models.Notification", b =>
                {
                    b.HasOne("Bank.DAL.Models.Client", "Client")
                        .WithMany("Notifications")
                        .HasForeignKey("ClientId");
                });

            modelBuilder.Entity("Bank.DAL.Models.Transaction", b =>
                {
                    b.HasOne("Bank.DAL.Models.Client", "Receiver")
                        .WithMany("Transactions")
                        .HasForeignKey("ClientId");
                });
#pragma warning restore 612, 618
        }
    }
}
